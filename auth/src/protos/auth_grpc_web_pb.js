/**
 * @fileoverview gRPC-Web generated client stub for 
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v4.23.3
// source: src/protos/auth.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');

const proto = require('./auth_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.AuthServicesClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.AuthServicesPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.PatientSignupPayload,
 *   !proto.Response>}
 */
const methodDescriptor_AuthServices_PatientSignup = new grpc.web.MethodDescriptor(
  '/AuthServices/PatientSignup',
  grpc.web.MethodType.UNARY,
  proto.PatientSignupPayload,
  proto.Response,
  /**
   * @param {!proto.PatientSignupPayload} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.Response.deserializeBinary
);


/**
 * @param {!proto.PatientSignupPayload} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.Response)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.Response>|undefined}
 *     The XHR Node Readable Stream
 */
proto.AuthServicesClient.prototype.patientSignup =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/AuthServices/PatientSignup',
      request,
      metadata || {},
      methodDescriptor_AuthServices_PatientSignup,
      callback);
};


/**
 * @param {!proto.PatientSignupPayload} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.Response>}
 *     Promise that resolves to the response
 */
proto.AuthServicesPromiseClient.prototype.patientSignup =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/AuthServices/PatientSignup',
      request,
      metadata || {},
      methodDescriptor_AuthServices_PatientSignup);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.ClinicianSignupPayload,
 *   !proto.Response>}
 */
const methodDescriptor_AuthServices_ClinicianSignup = new grpc.web.MethodDescriptor(
  '/AuthServices/ClinicianSignup',
  grpc.web.MethodType.UNARY,
  proto.ClinicianSignupPayload,
  proto.Response,
  /**
   * @param {!proto.ClinicianSignupPayload} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.Response.deserializeBinary
);


/**
 * @param {!proto.ClinicianSignupPayload} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.Response)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.Response>|undefined}
 *     The XHR Node Readable Stream
 */
proto.AuthServicesClient.prototype.clinicianSignup =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/AuthServices/ClinicianSignup',
      request,
      metadata || {},
      methodDescriptor_AuthServices_ClinicianSignup,
      callback);
};


/**
 * @param {!proto.ClinicianSignupPayload} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.Response>}
 *     Promise that resolves to the response
 */
proto.AuthServicesPromiseClient.prototype.clinicianSignup =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/AuthServices/ClinicianSignup',
      request,
      metadata || {},
      methodDescriptor_AuthServices_ClinicianSignup);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.LoginPayload,
 *   !proto.Response>}
 */
const methodDescriptor_AuthServices_Login = new grpc.web.MethodDescriptor(
  '/AuthServices/Login',
  grpc.web.MethodType.UNARY,
  proto.LoginPayload,
  proto.Response,
  /**
   * @param {!proto.LoginPayload} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.Response.deserializeBinary
);


/**
 * @param {!proto.LoginPayload} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.Response)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.Response>|undefined}
 *     The XHR Node Readable Stream
 */
proto.AuthServicesClient.prototype.login =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/AuthServices/Login',
      request,
      metadata || {},
      methodDescriptor_AuthServices_Login,
      callback);
};


/**
 * @param {!proto.LoginPayload} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.Response>}
 *     Promise that resolves to the response
 */
proto.AuthServicesPromiseClient.prototype.login =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/AuthServices/Login',
      request,
      metadata || {},
      methodDescriptor_AuthServices_Login);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.VerifyAccountPayload,
 *   !proto.Response>}
 */
const methodDescriptor_AuthServices_VerifyAccount = new grpc.web.MethodDescriptor(
  '/AuthServices/VerifyAccount',
  grpc.web.MethodType.UNARY,
  proto.VerifyAccountPayload,
  proto.Response,
  /**
   * @param {!proto.VerifyAccountPayload} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.Response.deserializeBinary
);


/**
 * @param {!proto.VerifyAccountPayload} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.Response)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.Response>|undefined}
 *     The XHR Node Readable Stream
 */
proto.AuthServicesClient.prototype.verifyAccount =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/AuthServices/VerifyAccount',
      request,
      metadata || {},
      methodDescriptor_AuthServices_VerifyAccount,
      callback);
};


/**
 * @param {!proto.VerifyAccountPayload} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.Response>}
 *     Promise that resolves to the response
 */
proto.AuthServicesPromiseClient.prototype.verifyAccount =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/AuthServices/VerifyAccount',
      request,
      metadata || {},
      methodDescriptor_AuthServices_VerifyAccount);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.CreatePasswordPayload,
 *   !proto.Response>}
 */
const methodDescriptor_AuthServices_CreatePassword = new grpc.web.MethodDescriptor(
  '/AuthServices/CreatePassword',
  grpc.web.MethodType.UNARY,
  proto.CreatePasswordPayload,
  proto.Response,
  /**
   * @param {!proto.CreatePasswordPayload} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.Response.deserializeBinary
);


/**
 * @param {!proto.CreatePasswordPayload} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.Response)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.Response>|undefined}
 *     The XHR Node Readable Stream
 */
proto.AuthServicesClient.prototype.createPassword =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/AuthServices/CreatePassword',
      request,
      metadata || {},
      methodDescriptor_AuthServices_CreatePassword,
      callback);
};


/**
 * @param {!proto.CreatePasswordPayload} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.Response>}
 *     Promise that resolves to the response
 */
proto.AuthServicesPromiseClient.prototype.createPassword =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/AuthServices/CreatePassword',
      request,
      metadata || {},
      methodDescriptor_AuthServices_CreatePassword);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.VerifyOneTimePasswordPayload,
 *   !proto.Response>}
 */
const methodDescriptor_AuthServices_VerifyOneTimePassword = new grpc.web.MethodDescriptor(
  '/AuthServices/VerifyOneTimePassword',
  grpc.web.MethodType.UNARY,
  proto.VerifyOneTimePasswordPayload,
  proto.Response,
  /**
   * @param {!proto.VerifyOneTimePasswordPayload} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.Response.deserializeBinary
);


/**
 * @param {!proto.VerifyOneTimePasswordPayload} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.Response)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.Response>|undefined}
 *     The XHR Node Readable Stream
 */
proto.AuthServicesClient.prototype.verifyOneTimePassword =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/AuthServices/VerifyOneTimePassword',
      request,
      metadata || {},
      methodDescriptor_AuthServices_VerifyOneTimePassword,
      callback);
};


/**
 * @param {!proto.VerifyOneTimePasswordPayload} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.Response>}
 *     Promise that resolves to the response
 */
proto.AuthServicesPromiseClient.prototype.verifyOneTimePassword =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/AuthServices/VerifyOneTimePassword',
      request,
      metadata || {},
      methodDescriptor_AuthServices_VerifyOneTimePassword);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.ForgotPayload,
 *   !proto.Response>}
 */
const methodDescriptor_AuthServices_ForgotPassword = new grpc.web.MethodDescriptor(
  '/AuthServices/ForgotPassword',
  grpc.web.MethodType.UNARY,
  proto.ForgotPayload,
  proto.Response,
  /**
   * @param {!proto.ForgotPayload} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.Response.deserializeBinary
);


/**
 * @param {!proto.ForgotPayload} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.Response)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.Response>|undefined}
 *     The XHR Node Readable Stream
 */
proto.AuthServicesClient.prototype.forgotPassword =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/AuthServices/ForgotPassword',
      request,
      metadata || {},
      methodDescriptor_AuthServices_ForgotPassword,
      callback);
};


/**
 * @param {!proto.ForgotPayload} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.Response>}
 *     Promise that resolves to the response
 */
proto.AuthServicesPromiseClient.prototype.forgotPassword =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/AuthServices/ForgotPassword',
      request,
      metadata || {},
      methodDescriptor_AuthServices_ForgotPassword);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.ResetPayload,
 *   !proto.Response>}
 */
const methodDescriptor_AuthServices_ResetPassword = new grpc.web.MethodDescriptor(
  '/AuthServices/ResetPassword',
  grpc.web.MethodType.UNARY,
  proto.ResetPayload,
  proto.Response,
  /**
   * @param {!proto.ResetPayload} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.Response.deserializeBinary
);


/**
 * @param {!proto.ResetPayload} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.Response)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.Response>|undefined}
 *     The XHR Node Readable Stream
 */
proto.AuthServicesClient.prototype.resetPassword =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/AuthServices/ResetPassword',
      request,
      metadata || {},
      methodDescriptor_AuthServices_ResetPassword,
      callback);
};


/**
 * @param {!proto.ResetPayload} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.Response>}
 *     Promise that resolves to the response
 */
proto.AuthServicesPromiseClient.prototype.resetPassword =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/AuthServices/ResetPassword',
      request,
      metadata || {},
      methodDescriptor_AuthServices_ResetPassword);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.InsurancePayload,
 *   !proto.Response>}
 */
const methodDescriptor_AuthServices_UpdateInsurance = new grpc.web.MethodDescriptor(
  '/AuthServices/UpdateInsurance',
  grpc.web.MethodType.UNARY,
  proto.InsurancePayload,
  proto.Response,
  /**
   * @param {!proto.InsurancePayload} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.Response.deserializeBinary
);


/**
 * @param {!proto.InsurancePayload} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.Response)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.Response>|undefined}
 *     The XHR Node Readable Stream
 */
proto.AuthServicesClient.prototype.updateInsurance =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/AuthServices/UpdateInsurance',
      request,
      metadata || {},
      methodDescriptor_AuthServices_UpdateInsurance,
      callback);
};


/**
 * @param {!proto.InsurancePayload} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.Response>}
 *     Promise that resolves to the response
 */
proto.AuthServicesPromiseClient.prototype.updateInsurance =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/AuthServices/UpdateInsurance',
      request,
      metadata || {},
      methodDescriptor_AuthServices_UpdateInsurance);
};


module.exports = proto;

