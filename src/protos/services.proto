syntax = "proto3";

package scheduler;

import "schedule.proto";
import "subscription.proto";
import "user.subscription.proto";
import "review.proto";

service ScheduleService {
    rpc GetSchedules(GetAllSchedules) returns (SchedulesResponse) {}
    rpc GetSchedule(GetOneSchedule) returns (ScheduleResponse) {}
    rpc CreateSchedule(CreateSchedule) returns (ScheduleMessage) {}
    rpc CreateReSchedule(CreateReSchedule) returns (ScheduleMessage) {}
    rpc UpdateSchedule(UpdateSchedule) returns (ScheduleMessage) {}
    rpc UpdateReSchedule(UpdateReSchedule) returns (ScheduleMessage) {}
    rpc DeleteSchedule(DeleteSchedule) returns (ScheduleMessage) {}
    rpc DeleteReSchedule(DeleteReSchedule) returns (ScheduleMessage) {}
}

service  SubscriptionService {
    rpc GetSubscriptions(GetAllSubscriptions) returns (SubscriptionsResponse) {}
    rpc GetSubscription(GetOneSubscription) returns (SubscriptionResponse) {}
    rpc CreateSubscription(CreateSubscription) returns (SubscriptionMessage) {}
    rpc UpdateSubscription(UpdateSubscription) returns (SubscriptionMessage) {}
    rpc DeletSubscription(DeleteSubscription) returns (SubscriptionMessage) {}
}

service UserSubscriptionService {
    rpc GetUserSubscriptions(GetAllUserSubscriptions) returns (SubscriptionsResponse) {}
    rpc GetUserSubscription(GetOneUserSubscription) returns (SubscriptionResponse) {}
    rpc CreateUserSubscription(CreateUserSubscription) returns (SubscriptionMessage) {}
    rpc UpdateUserSubscription(CreateUserSubscription) returns (SubscriptionMessage) {}
    rpc DeleteUserSubscription(DeleteUserSubscription) returns (SubscriptionMessage) {}
}

service ReviewService {
    rpc GetDoctorReviews(GetDoctorReviews) returns (ReviewsResponse) {}
    rpc GetSessionReviews(GetSessionReviews) returns (ReviewResponse) {}
    rpc CreateReview(CreateReview) returns (ReviewMessage) {}
    rpc UpdateReview(UpdateReview) returns (ReviewMessage) {}
    rpc DeleteReview(DeleteReview) returns (ReviewMessage) {}
}

// From external source for searching
enum DoctorType {
    // required for searching doctor while scheduling
}

