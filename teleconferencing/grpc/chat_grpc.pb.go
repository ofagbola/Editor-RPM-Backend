// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: grpc/chat.proto

package websocket_chat

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChatServiceClient is the client API for ChatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatServiceClient interface {
	Testing(ctx context.Context, in *Test, opts ...grpc.CallOption) (*Test, error)
	FetchChatList(ctx context.Context, in *ChatListRequest, opts ...grpc.CallOption) (*ChatResponse, error)
	FetchOneOnOneChat(ctx context.Context, in *OneOnOneChatRequest, opts ...grpc.CallOption) (*ChatResponse, error)
	RecordCallSession(ctx context.Context, in *CallSession, opts ...grpc.CallOption) (*CallSession, error)
}

type chatServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatServiceClient(cc grpc.ClientConnInterface) ChatServiceClient {
	return &chatServiceClient{cc}
}

func (c *chatServiceClient) Testing(ctx context.Context, in *Test, opts ...grpc.CallOption) (*Test, error) {
	out := new(Test)
	err := c.cc.Invoke(ctx, "/chat.ChatService/Testing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) FetchChatList(ctx context.Context, in *ChatListRequest, opts ...grpc.CallOption) (*ChatResponse, error) {
	out := new(ChatResponse)
	err := c.cc.Invoke(ctx, "/chat.ChatService/FetchChatList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) FetchOneOnOneChat(ctx context.Context, in *OneOnOneChatRequest, opts ...grpc.CallOption) (*ChatResponse, error) {
	out := new(ChatResponse)
	err := c.cc.Invoke(ctx, "/chat.ChatService/FetchOneOnOneChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) RecordCallSession(ctx context.Context, in *CallSession, opts ...grpc.CallOption) (*CallSession, error) {
	out := new(CallSession)
	err := c.cc.Invoke(ctx, "/chat.ChatService/RecordCallSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatServiceServer is the server API for ChatService service.
// All implementations must embed UnimplementedChatServiceServer
// for forward compatibility
type ChatServiceServer interface {
	Testing(context.Context, *Test) (*Test, error)
	FetchChatList(context.Context, *ChatListRequest) (*ChatResponse, error)
	FetchOneOnOneChat(context.Context, *OneOnOneChatRequest) (*ChatResponse, error)
	RecordCallSession(context.Context, *CallSession) (*CallSession, error)
	mustEmbedUnimplementedChatServiceServer()
}

// UnimplementedChatServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChatServiceServer struct {
}

func (UnimplementedChatServiceServer) Testing(context.Context, *Test) (*Test, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Testing not implemented")
}
func (UnimplementedChatServiceServer) FetchChatList(context.Context, *ChatListRequest) (*ChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchChatList not implemented")
}
func (UnimplementedChatServiceServer) FetchOneOnOneChat(context.Context, *OneOnOneChatRequest) (*ChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchOneOnOneChat not implemented")
}
func (UnimplementedChatServiceServer) RecordCallSession(context.Context, *CallSession) (*CallSession, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordCallSession not implemented")
}
func (UnimplementedChatServiceServer) mustEmbedUnimplementedChatServiceServer() {}

// UnsafeChatServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatServiceServer will
// result in compilation errors.
type UnsafeChatServiceServer interface {
	mustEmbedUnimplementedChatServiceServer()
}

func RegisterChatServiceServer(s grpc.ServiceRegistrar, srv ChatServiceServer) {
	s.RegisterService(&ChatService_ServiceDesc, srv)
}

func _ChatService_Testing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Test)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).Testing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatService/Testing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).Testing(ctx, req.(*Test))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_FetchChatList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).FetchChatList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatService/FetchChatList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).FetchChatList(ctx, req.(*ChatListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_FetchOneOnOneChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OneOnOneChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).FetchOneOnOneChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatService/FetchOneOnOneChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).FetchOneOnOneChat(ctx, req.(*OneOnOneChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_RecordCallSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallSession)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).RecordCallSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatService/RecordCallSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).RecordCallSession(ctx, req.(*CallSession))
	}
	return interceptor(ctx, in, info, handler)
}

// ChatService_ServiceDesc is the grpc.ServiceDesc for ChatService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chat.ChatService",
	HandlerType: (*ChatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Testing",
			Handler:    _ChatService_Testing_Handler,
		},
		{
			MethodName: "FetchChatList",
			Handler:    _ChatService_FetchChatList_Handler,
		},
		{
			MethodName: "FetchOneOnOneChat",
			Handler:    _ChatService_FetchOneOnOneChat_Handler,
		},
		{
			MethodName: "RecordCallSession",
			Handler:    _ChatService_RecordCallSession_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/chat.proto",
}
