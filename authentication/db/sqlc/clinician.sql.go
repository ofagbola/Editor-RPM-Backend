// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: clinician.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createClinician = `-- name: CreateClinician :one
INSERT INTO clinicians (
  id,  
  username,
  credentials,
  specialities,
  clinic_name,
  clinic_id,
  image,
  accept_patient
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8
) RETURNING id, username, credentials, specialities, clinic_name, clinic_id, image, accept_patient, created_at
`

type CreateClinicianParams struct {
	ID            uuid.UUID `json:"id"`
	Username      string    `json:"username"`
	Credentials   []string  `json:"credentials"`
	Specialities  []string  `json:"specialities"`
	ClinicName    string    `json:"clinic_name"`
	ClinicID      string    `json:"clinic_id"`
	Image         string    `json:"image"`
	AcceptPatient bool      `json:"accept_patient"`
}

func (q *Queries) CreateClinician(ctx context.Context, arg CreateClinicianParams) (Clinician, error) {
	row := q.db.QueryRow(ctx, createClinician,
		arg.ID,
		arg.Username,
		arg.Credentials,
		arg.Specialities,
		arg.ClinicName,
		arg.ClinicID,
		arg.Image,
		arg.AcceptPatient,
	)
	var i Clinician
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Credentials,
		&i.Specialities,
		&i.ClinicName,
		&i.ClinicID,
		&i.Image,
		&i.AcceptPatient,
		&i.CreatedAt,
	)
	return i, err
}

const getClinician = `-- name: GetClinician :one
SELECT id, username, credentials, specialities, clinic_name, clinic_id, image, accept_patient, created_at FROM clinicians
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetClinician(ctx context.Context, username string) (Clinician, error) {
	row := q.db.QueryRow(ctx, getClinician, username)
	var i Clinician
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Credentials,
		&i.Specialities,
		&i.ClinicName,
		&i.ClinicID,
		&i.Image,
		&i.AcceptPatient,
		&i.CreatedAt,
	)
	return i, err
}

const updateClinician = `-- name: UpdateClinician :one
UPDATE clinicians
SET
  credentials = COALESCE($1, credentials),
  specialities = COALESCE($2, specialities),
  clinic_name = COALESCE($3, clinic_name),
  clinic_id = COALESCE($4, clinic_id),
  accept_patient = COALESCE($5, accept_patient),
  image = COALESCE($6, image)
WHERE
  username = $7
RETURNING id, username, credentials, specialities, clinic_name, clinic_id, image, accept_patient, created_at
`

type UpdateClinicianParams struct {
	Credentials   []string    `json:"credentials"`
	Specialities  []string    `json:"specialities"`
	ClinicName    pgtype.Text `json:"clinic_name"`
	ClinicID      pgtype.Text `json:"clinic_id"`
	AcceptPatient pgtype.Bool `json:"accept_patient"`
	Image         pgtype.Text `json:"image"`
	Username      string      `json:"username"`
}

func (q *Queries) UpdateClinician(ctx context.Context, arg UpdateClinicianParams) (Clinician, error) {
	row := q.db.QueryRow(ctx, updateClinician,
		arg.Credentials,
		arg.Specialities,
		arg.ClinicName,
		arg.ClinicID,
		arg.AcceptPatient,
		arg.Image,
		arg.Username,
	)
	var i Clinician
	err := row.Scan(
		&i.ID,
		&i.Username, 
		&i.Credentials,
		&i.Specialities,
		&i.ClinicName,
		&i.ClinicID,
		&i.Image,
		&i.AcceptPatient,
		&i.CreatedAt,
	)
	return i, err
}
