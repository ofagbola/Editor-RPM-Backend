// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: verify_forgot_password.sql

package db

import (
	"context"
)

const createVerifyForgotPassword = `-- name: CreateVerifyForgotPassword :one
INSERT INTO verify_forgot_passwords (
    username,
    email,
    secret_code
) VALUES (
    $1, $2, $3
) RETURNING id, username, email, secret_code, is_used, created_at, expired_at
`

type CreateVerifyForgotPasswordParams struct {
	Username   string `json:"username"`
	Email      string `json:"email"`
	SecretCode int64  `json:"secret_code"`
}

func (q *Queries) CreateVerifyForgotPassword(ctx context.Context, arg CreateVerifyForgotPasswordParams) (VerifyForgotPassword, error) {
	row := q.db.QueryRow(ctx, createVerifyForgotPassword, arg.Username, arg.Email, arg.SecretCode)
	var i VerifyForgotPassword
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.SecretCode,
		&i.IsUsed,
		&i.CreatedAt,
		&i.ExpiredAt,
	)
	return i, err
}

const getVerifyForgotPassword = `-- name: GetVerifyForgotPassword :one
SELECT id, username, email, secret_code, is_used, created_at, expired_at FROM verify_forgot_passwords
WHERE username = $1 
  AND expired_at > now()
ORDER BY created_at DESC 
LIMIT 1
`

func (q *Queries) GetVerifyForgotPassword(ctx context.Context, username string) (VerifyForgotPassword, error) {
	row := q.db.QueryRow(ctx, getVerifyForgotPassword, username)
	var i VerifyForgotPassword
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.SecretCode,
		&i.IsUsed,
		&i.CreatedAt,
		&i.ExpiredAt,
	)
	return i, err
}

const updateVerifyForgotPassword = `-- name: UpdateVerifyForgotPassword :one
UPDATE verify_forgot_passwords
SET
    is_used = TRUE
WHERE
    -- id = @id
    username = $1
    AND secret_code = $2
    AND is_used = FALSE
    AND expired_at > now()
RETURNING id, username, email, secret_code, is_used, created_at, expired_at
`

type UpdateVerifyForgotPasswordParams struct {
	Username   string `json:"username"`
	SecretCode int64  `json:"secret_code"`
}

func (q *Queries) UpdateVerifyForgotPassword(ctx context.Context, arg UpdateVerifyForgotPasswordParams) (VerifyForgotPassword, error) {
	row := q.db.QueryRow(ctx, updateVerifyForgotPassword, arg.Username, arg.SecretCode)
	var i VerifyForgotPassword
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.SecretCode,
		&i.IsUsed,
		&i.CreatedAt,
		&i.ExpiredAt,
	)
	return i, err
}
