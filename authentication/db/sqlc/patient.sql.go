// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: patient.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createPatient = `-- name: CreatePatient :one
INSERT INTO patients (
  id,  
  username,
  medical_history,
  provider,
  out_of_network_expenses,
  out_of_network_expenses,
  co_pay
) VALUES (
  $1, $2, $3, $4, $5, $6, $7
) RETURNING id, username, medical_history, provider, out_of_network_expenses, out_of_pocket_expenses, co_pay, created_at
`

type CreatePatientParams struct {
	ID                     uuid.UUID `json:"id"`
	Username               string    `json:"username"`
	MedicalHistory         []string  `json:"medical_history"`
	Provider               string    `json:"provider"`
	OutOfNetworkExpenses   string    `json:"out_of_network_expenses"`
	OutOfNetworkExpenses_2 string    `json:"out_of_network_expenses_2"`
	CoPay                  string    `json:"co_pay"`
}

func (q *Queries) CreatePatient(ctx context.Context, arg CreatePatientParams) (Patient, error) {
	row := q.db.QueryRow(ctx, createPatient,
		arg.ID,
		arg.Username,
		arg.MedicalHistory,
		arg.Provider,
		arg.OutOfNetworkExpenses,
		arg.OutOfNetworkExpenses_2,
		arg.CoPay,
	)
	var i Patient
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.MedicalHistory,
		&i.Provider,
		&i.OutOfNetworkExpenses,
		&i.OutOfPocketExpenses,
		&i.CoPay,
		&i.CreatedAt,
	)
	return i, err
}

const getPatient = `-- name: GetPatient :one
SELECT id, username, medical_history, provider, out_of_network_expenses, out_of_pocket_expenses, co_pay, created_at FROM patients
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetPatient(ctx context.Context, username string) (Patient, error) {
	row := q.db.QueryRow(ctx, getPatient, username)
	var i Patient
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.MedicalHistory,
		&i.Provider,
		&i.OutOfNetworkExpenses,
		&i.OutOfPocketExpenses,
		&i.CoPay,
		&i.CreatedAt,
	)
	return i, err
}

const updatePatient = `-- name: UpdatePatient :one
UPDATE patients
SET
  medical_history = COALESCE($1, medical_history),
  provider = COALESCE($2, provider),
  out_of_network_expenses = COALESCE($3, out_of_network_expenses),
  out_of_network_expenses = COALESCE($3, out_of_network_expenses),
  co_pay = COALESCE($4, co_pay)
WHERE
  username = $5
RETURNING id, username, medical_history, provider, out_of_network_expenses, out_of_pocket_expenses, co_pay, created_at
`

type UpdatePatientParams struct {
	MedicalHistory       []string    `json:"medical_history"`
	Provider             pgtype.Text `json:"provider"`
	OutOfNetworkExpenses pgtype.Text `json:"out_of_network_expenses"`
	CoPay                pgtype.Text `json:"co_pay"`
	Username             string      `json:"username"`
}

func (q *Queries) UpdatePatient(ctx context.Context, arg UpdatePatientParams) (Patient, error) {
	row := q.db.QueryRow(ctx, updatePatient,
		arg.MedicalHistory,
		arg.Provider,
		arg.OutOfNetworkExpenses,
		arg.CoPay,
		arg.Username,
	)
	var i Patient
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.MedicalHistory,
		&i.Provider,
		&i.OutOfNetworkExpenses,
		&i.OutOfPocketExpenses,
		&i.CoPay,
		&i.CreatedAt,
	)
	return i, err
}
