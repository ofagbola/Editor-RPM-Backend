// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: patient_clinician_mapping.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPatientClinicianMapping = `-- name: CreatePatientClinicianMapping :one
INSERT INTO patient_clinician_mappings (
    id,
    sender,
    recipient_email,
    invite_accepted,
    recipient_username
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, sender, recipient_username, recipient_email, invite_accepted, accepted_date, created_at
`

type CreatePatientClinicianMappingParams struct {
	ID                int64  `json:"id"`
	Sender            string `json:"sender"`
	RecipientEmail    string `json:"recipient_email"`
	InviteAccepted    bool   `json:"invite_accepted"`
	RecipientUsername string `json:"recipient_username"`
}

func (q *Queries) CreatePatientClinicianMapping(ctx context.Context, arg CreatePatientClinicianMappingParams) (PatientClinicianMapping, error) {
	row := q.db.QueryRow(ctx, createPatientClinicianMapping,
		arg.ID,
		arg.Sender,
		arg.RecipientEmail,
		arg.InviteAccepted,
		arg.RecipientUsername,
	)
	var i PatientClinicianMapping
	err := row.Scan(
		&i.ID,
		&i.Sender,
		&i.RecipientUsername,
		&i.RecipientEmail,
		&i.InviteAccepted,
		&i.AcceptedDate,
		&i.CreatedAt,
	)
	return i, err
}

const getPatientClinicianMapping = `-- name: GetPatientClinicianMapping :one
SELECT id, sender, recipient_username, recipient_email, invite_accepted, accepted_date, created_at FROM patient_clinician_mappings
WHERE sender = $1 OR recipient_username = $1
LIMIT 1
`

func (q *Queries) GetPatientClinicianMapping(ctx context.Context, sender string) (PatientClinicianMapping, error) {
	row := q.db.QueryRow(ctx, getPatientClinicianMapping, sender)
	var i PatientClinicianMapping
	err := row.Scan(
		&i.ID,
		&i.Sender,
		&i.RecipientUsername,
		&i.RecipientEmail,
		&i.InviteAccepted,
		&i.AcceptedDate,
		&i.CreatedAt,
	)
	return i, err
}

const listAcceptedPatientClinicianMapping = `-- name: ListAcceptedPatientClinicianMapping :many
SELECT id, sender, recipient_username, recipient_email, invite_accepted, accepted_date, created_at FROM patient_clinician_mappings
WHERE (sender = $1 OR recipient_username = $1) AND invite_accepted = TRUE
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListAcceptedPatientClinicianMappingParams struct {
	Sender string `json:"sender"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

func (q *Queries) ListAcceptedPatientClinicianMapping(ctx context.Context, arg ListAcceptedPatientClinicianMappingParams) ([]PatientClinicianMapping, error) {
	rows, err := q.db.Query(ctx, listAcceptedPatientClinicianMapping, arg.Sender, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PatientClinicianMapping{}
	for rows.Next() {
		var i PatientClinicianMapping
		if err := rows.Scan(
			&i.ID,
			&i.Sender,
			&i.RecipientUsername,
			&i.RecipientEmail,
			&i.InviteAccepted,
			&i.AcceptedDate,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPatientClinicianMapping = `-- name: ListPatientClinicianMapping :many


SELECT id, sender, recipient_username, recipient_email, invite_accepted, accepted_date, created_at FROM patient_clinician_mappings
WHERE sender = $1 OR recipient_username = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListPatientClinicianMappingParams struct {
	Sender string `json:"sender"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

// Adjust the number as needed
func (q *Queries) ListPatientClinicianMapping(ctx context.Context, arg ListPatientClinicianMappingParams) ([]PatientClinicianMapping, error) {
	rows, err := q.db.Query(ctx, listPatientClinicianMapping, arg.Sender, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PatientClinicianMapping{}
	for rows.Next() {
		var i PatientClinicianMapping
		if err := rows.Scan(
			&i.ID,
			&i.Sender,
			&i.RecipientUsername,
			&i.RecipientEmail,
			&i.InviteAccepted,
			&i.AcceptedDate,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePatientClinicianMapping = `-- name: UpdatePatientClinicianMapping :one
UPDATE patient_clinician_mappings
SET
    accepted_date = COALESCE($1, accepted_date),
    invite_accepted = COALESCE($2, invite_accepted),
    recipient_username = COALESCE($3, recipient_username)
WHERE
  id = $4
RETURNING id, sender, recipient_username, recipient_email, invite_accepted, accepted_date, created_at
`

type UpdatePatientClinicianMappingParams struct {
	AcceptedDate      pgtype.Timestamptz `json:"accepted_date"`
	InviteAccepted    pgtype.Bool        `json:"invite_accepted"`
	RecipientUsername pgtype.Text        `json:"recipient_username"`
	ID                int64              `json:"id"`
}

// sender = sqlc.arg(sender) -- OR recipient email
func (q *Queries) UpdatePatientClinicianMapping(ctx context.Context, arg UpdatePatientClinicianMappingParams) (PatientClinicianMapping, error) {
	row := q.db.QueryRow(ctx, updatePatientClinicianMapping,
		arg.AcceptedDate,
		arg.InviteAccepted,
		arg.RecipientUsername,
		arg.ID,
	)
	var i PatientClinicianMapping
	err := row.Scan(
		&i.ID,
		&i.Sender,
		&i.RecipientUsername,
		&i.RecipientEmail,
		&i.InviteAccepted,
		&i.AcceptedDate,
		&i.CreatedAt,
	)
	return i, err
}
