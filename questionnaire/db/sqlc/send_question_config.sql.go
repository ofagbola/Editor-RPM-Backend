// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: send_question_config.sql

package db

import (
	"context"
)

const createSendQuestionConfig = `-- name: CreateSendQuestionConfig :one
INSERT INTO send_question_configs (
  question_config_id,  
  recipient,
  sender
) VALUES (
  $1, $2, $3
) RETURNING id, question_config_id, recipient, sender, submitted, created_at
`

type CreateSendQuestionConfigParams struct {
	QuestionConfigID int64  `json:"question_config_id"`
	Recipient        string `json:"recipient"`
	Sender           string `json:"sender"`
}

func (q *Queries) CreateSendQuestionConfig(ctx context.Context, arg CreateSendQuestionConfigParams) (SendQuestionConfig, error) {
	row := q.db.QueryRow(ctx, createSendQuestionConfig, arg.QuestionConfigID, arg.Recipient, arg.Sender)
	var i SendQuestionConfig
	err := row.Scan(
		&i.ID,
		&i.QuestionConfigID,
		&i.Recipient,
		&i.Sender,
		&i.Submitted,
		&i.CreatedAt,
	)
	return i, err
}

const deleteSendQuestionConfig = `-- name: DeleteSendQuestionConfig :exec
DELETE FROM send_question_configs
WHERE id = $1
`

func (q *Queries) DeleteSendQuestionConfig(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteSendQuestionConfig, id)
	return err
}

const getSendQuestionConfig = `-- name: GetSendQuestionConfig :one
SELECT id, question_config_id, recipient, sender, submitted, created_at FROM send_question_configs
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetSendQuestionConfig(ctx context.Context, id int64) (SendQuestionConfig, error) {
	row := q.db.QueryRow(ctx, getSendQuestionConfig, id)
	var i SendQuestionConfig
	err := row.Scan(
		&i.ID,
		&i.QuestionConfigID,
		&i.Recipient,
		&i.Sender,
		&i.Submitted,
		&i.CreatedAt,
	)
	return i, err
}

const listSendQuestionConfigs = `-- name: ListSendQuestionConfigs :many
SELECT id, question_config_id, recipient, sender, submitted, created_at FROM send_question_configs
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListSendQuestionConfigsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListSendQuestionConfigs(ctx context.Context, arg ListSendQuestionConfigsParams) ([]SendQuestionConfig, error) {
	rows, err := q.db.Query(ctx, listSendQuestionConfigs, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SendQuestionConfig{}
	for rows.Next() {
		var i SendQuestionConfig
		if err := rows.Scan(
			&i.ID,
			&i.QuestionConfigID,
			&i.Recipient,
			&i.Sender,
			&i.Submitted,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
