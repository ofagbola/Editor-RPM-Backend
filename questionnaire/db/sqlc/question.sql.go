// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: question.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createQuestion = `-- name: CreateQuestion :one
INSERT INTO questions (
  code,
  title,  
  input_field,
  options,
  created_by
) VALUES (
  $1, $2, $3, $4, $5
) RETURNING code, title, input_field, options, created_by, created_at
`

type CreateQuestionParams struct {
	Code       string   `json:"code"`
	Title      string   `json:"title"`
	InputField string   `json:"input_field"`
	Options    []string `json:"options"`
	CreatedBy  string   `json:"created_by"`
}

func (q *Queries) CreateQuestion(ctx context.Context, arg CreateQuestionParams) (Question, error) {
	row := q.db.QueryRow(ctx, createQuestion,
		arg.Code,
		arg.Title,
		arg.InputField,
		arg.Options,
		arg.CreatedBy,
	)
	var i Question
	err := row.Scan(
		&i.Code,
		&i.Title,
		&i.InputField,
		&i.Options,
		&i.CreatedBy,
		&i.CreatedAt,
	)
	return i, err
}

const deleteQuestion = `-- name: DeleteQuestion :exec
DELETE FROM questions
WHERE code = $1
`

func (q *Queries) DeleteQuestion(ctx context.Context, code string) error {
	_, err := q.db.Exec(ctx, deleteQuestion, code)
	return err
}

const getQuestion = `-- name: GetQuestion :one
SELECT code, title, input_field, options, created_by, created_at FROM questions
WHERE code = $1 LIMIT 1
`

func (q *Queries) GetQuestion(ctx context.Context, code string) (Question, error) {
	row := q.db.QueryRow(ctx, getQuestion, code)
	var i Question
	err := row.Scan(
		&i.Code,
		&i.Title,
		&i.InputField,
		&i.Options,
		&i.CreatedBy,
		&i.CreatedAt,
	)
	return i, err
}

const listQuestions = `-- name: ListQuestions :many
SELECT code, title, input_field, options, created_by, created_at FROM questions
ORDER BY code
LIMIT $1
OFFSET $2
`

type ListQuestionsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListQuestions(ctx context.Context, arg ListQuestionsParams) ([]Question, error) {
	rows, err := q.db.Query(ctx, listQuestions, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Question{}
	for rows.Next() {
		var i Question
		if err := rows.Scan(
			&i.Code,
			&i.Title,
			&i.InputField,
			&i.Options,
			&i.CreatedBy,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateQuestion = `-- name: UpdateQuestion :one
UPDATE questions
SET
  title = COALESCE($1, title),
  input_field = COALESCE($2, input_field), 
  options = COALESCE($3, options) 
WHERE
 created_by = $4
 AND code = $5
RETURNING code, title, input_field, options, created_by, created_at
`

type UpdateQuestionParams struct {
	Title      pgtype.Text `json:"title"`
	InputField pgtype.Text `json:"input_field"`
	Options    []string    `json:"options"`
	CreatedBy  string      `json:"created_by"`
	Code       string      `json:"code"`
}

func (q *Queries) UpdateQuestion(ctx context.Context, arg UpdateQuestionParams) (Question, error) {
	row := q.db.QueryRow(ctx, updateQuestion,
		arg.Title,
		arg.InputField,
		arg.Options,
		arg.CreatedBy,
		arg.Code,
	)
	var i Question
	err := row.Scan(
		&i.Code,
		&i.Title,
		&i.InputField,
		&i.Options,
		&i.CreatedBy,
		&i.CreatedAt,
	)
	return i, err
}
