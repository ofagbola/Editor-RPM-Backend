// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.0
// source: service_questionnaire.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	QuestionnaireService_CreateQuestion_FullMethodName       = "/pb.QuestionnaireService/CreateQuestion"
	QuestionnaireService_CreateQuestionConfig_FullMethodName = "/pb.QuestionnaireService/CreateQuestionConfig"
)

// QuestionnaireServiceClient is the client API for QuestionnaireService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuestionnaireServiceClient interface {
	CreateQuestion(ctx context.Context, in *CreateQuestionRequest, opts ...grpc.CallOption) (*CreateQuestionResponse, error)
	CreateQuestionConfig(ctx context.Context, in *CreateQuestionConfigRequest, opts ...grpc.CallOption) (*CreateQuestionConfigResponse, error)
}

type questionnaireServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQuestionnaireServiceClient(cc grpc.ClientConnInterface) QuestionnaireServiceClient {
	return &questionnaireServiceClient{cc}
}

func (c *questionnaireServiceClient) CreateQuestion(ctx context.Context, in *CreateQuestionRequest, opts ...grpc.CallOption) (*CreateQuestionResponse, error) {
	out := new(CreateQuestionResponse)
	err := c.cc.Invoke(ctx, QuestionnaireService_CreateQuestion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionnaireServiceClient) CreateQuestionConfig(ctx context.Context, in *CreateQuestionConfigRequest, opts ...grpc.CallOption) (*CreateQuestionConfigResponse, error) {
	out := new(CreateQuestionConfigResponse)
	err := c.cc.Invoke(ctx, QuestionnaireService_CreateQuestionConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuestionnaireServiceServer is the server API for QuestionnaireService service.
// All implementations must embed UnimplementedQuestionnaireServiceServer
// for forward compatibility
type QuestionnaireServiceServer interface {
	CreateQuestion(context.Context, *CreateQuestionRequest) (*CreateQuestionResponse, error)
	CreateQuestionConfig(context.Context, *CreateQuestionConfigRequest) (*CreateQuestionConfigResponse, error)
	mustEmbedUnimplementedQuestionnaireServiceServer()
}

// UnimplementedQuestionnaireServiceServer must be embedded to have forward compatible implementations.
type UnimplementedQuestionnaireServiceServer struct {
}

func (UnimplementedQuestionnaireServiceServer) CreateQuestion(context.Context, *CreateQuestionRequest) (*CreateQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQuestion not implemented")
}
func (UnimplementedQuestionnaireServiceServer) CreateQuestionConfig(context.Context, *CreateQuestionConfigRequest) (*CreateQuestionConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQuestionConfig not implemented")
}
func (UnimplementedQuestionnaireServiceServer) mustEmbedUnimplementedQuestionnaireServiceServer() {}

// UnsafeQuestionnaireServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuestionnaireServiceServer will
// result in compilation errors.
type UnsafeQuestionnaireServiceServer interface {
	mustEmbedUnimplementedQuestionnaireServiceServer()
}

func RegisterQuestionnaireServiceServer(s grpc.ServiceRegistrar, srv QuestionnaireServiceServer) {
	s.RegisterService(&QuestionnaireService_ServiceDesc, srv)
}

func _QuestionnaireService_CreateQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionnaireServiceServer).CreateQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuestionnaireService_CreateQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionnaireServiceServer).CreateQuestion(ctx, req.(*CreateQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionnaireService_CreateQuestionConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQuestionConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionnaireServiceServer).CreateQuestionConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuestionnaireService_CreateQuestionConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionnaireServiceServer).CreateQuestionConfig(ctx, req.(*CreateQuestionConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QuestionnaireService_ServiceDesc is the grpc.ServiceDesc for QuestionnaireService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QuestionnaireService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.QuestionnaireService",
	HandlerType: (*QuestionnaireServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateQuestion",
			Handler:    _QuestionnaireService_CreateQuestion_Handler,
		},
		{
			MethodName: "CreateQuestionConfig",
			Handler:    _QuestionnaireService_CreateQuestionConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_questionnaire.proto",
}
